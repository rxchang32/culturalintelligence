# -*- coding: utf-8 -*-
"""Actividad_Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11fnsmSbGo1umoTNXZ028JAZ7-4y0kpLV
"""





"""Final Activity Rachel Chang: Cultural Intelligence

Objective: Use the scale of The Cultural Intelligence Scale (CSQ) from Ang et al. (2007) for the students to answer and to realize if they have a Metagognitive CQ, Cognitive CQ, Motivational CQ and Behavioral CQ.

Target group: Students from Management & Leadership Area.

"""

import streamlit as st

#import ipywidgets as widgets
#from IPython.display import display, clear_output

# Preguntas y grupos
preguntas = [
    ("I am conscious of the cultural knowledge I use when interacting with people with different cultural backgrounds.", "Metacognitive CQ"),
    ("I adjust my cultural knowledge as I interact with people from a culture that is unfamiliar to me.", "Metacognitive CQ"),
    ("I am conscious of the cultural knowledge I apply to cross-cultural interactions.", "Metacognitive CQ"),
    ("I check the accuracy of my cultural knowledge as I interact with people from different cultures.", "Metacognitive CQ"),
    ("I know the legal and economic systems of other cultures.", "Cognitive CQ"),
    ("I know the rules (e.g. vocabulary, grammar) or other languages.", "Cognitive CQ"),
    ("I know the cultural values and religious beliefs of other cultures.", "Cognitive CQ"),
    ("I know the marriage systems of other cultures.", "Cognitive CQ"),
    ("I know the arts and crafts of other cultures.", "Cognitive CQ"),
    ("I know the rules for expressing nonverbal behaviors in other cultures.", "Cognitive CQ"),
    ("I enjoy interacting with people from different cultures.", "Motivational CQ"),
    ("I am confident that I can socialize with locals in a culture that is unfamiliar to me.", "Motivational CQ"),
    ("I am sure I can deal with the stresses of adjusting to a culture that is new to me.", "Motivational CQ"),
    ("I enjoy living in cultures that are unfamiliar to me.", "Motivational CQ"),
    ("I am confident that I can get accustomed to the shopping conditions in a different culture.", "Motivational CQ"),
    ("I change my verbal behavior (e.g., accent, tone) when a cross-cultural interaction requires it.", "Behavioral CQ"),
    ("I use pause and silence differently to suit different cross-cultural situations.", "Behavioral CQ"),
    ("I vary the rate of my speaking when a cross-cultural situation requires it.", "Behavioral CQ"),
    ("I alter my facial expressions when a cross-cultural interaction requires it.", "Behavioral CQ"),
    ("I change my non-verbal behavior when a cross-cultural interaction requires it.", "Behavioral CQ")
]

# Likert scale options
options = ["Strongly Disagree", "Disagree", "Somewhat Disagree", "Neutral", "Somewhat Agree", "Agree", "Strongly Agree"]
values = [1, 2, 3, 4, 5, 6, 7]

# Control de flujo
indice_pregunta = 0
respuestas = []

# Resultados
resultados = {
    "Metacognitive CQ": 0,
    "Cognitive CQ": 0,
    "Motivational CQ": 0,
    "Behavioral CQ": 0,
}

# Widgets
label_pregunta = widgets.Label()
radio_respuesta = widgets.RadioButtons(options=options, value=options[3])
boton_siguiente = widgets.Button(description="Siguiente")
barra = widgets.IntProgress(min=0, max=len(preguntas), value=0)
salida = widgets.Output()

def mostrar_pregunta():
    label_pregunta.value = preguntas[indice_pregunta][0]
    radio_respuesta.value = options[3]
    barra.value = indice_pregunta

def siguiente(_):
    global indice_pregunta

    seleccion = radio_respuesta.value
    respuestas.append(seleccion)
    valor_seleccion = values[options.index(seleccion)]
    category = preguntas[indice_pregunta][1]
    resultados[category] += valor_seleccion

    indice_pregunta += 1
    if indice_pregunta < len(preguntas):
        mostrar_pregunta()
    else:
        mostrar_resultado()

def mostrar_resultado():
    salida.clear_output()
    with salida:
        for categoria, puntaje in resultados.items():
            print(f"{categoria}: {puntaje}")
    boton_siguiente.disabled = True

# BotÃ³n reinicio (opcional)
def reiniciar(_):
    global indice_pregunta, respuestas, resultados
    indice_pregunta = 0
    respuestas = []
    resultados = {key: 0 for key in resultados}
    boton_siguiente.disabled = False
    salida.clear_output()
    mostrar_pregunta()

boton_reiniciar = widgets.Button(description="ðŸ”„ Reiniciar")
boton_reiniciar.on_click(reiniciar)

# Conectar eventos
boton_siguiente.on_click(siguiente)

# Mostrar
mostrar_pregunta()
display(barra, label_pregunta, radio_respuesta, boton_siguiente, salida, boton_reiniciar)
